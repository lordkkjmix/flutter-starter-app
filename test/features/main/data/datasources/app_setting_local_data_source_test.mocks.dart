// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_starter_app/test/features/main/data/datasources/app_setting_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_starter_app/core/providers/device_provider.dart' as _i3;
import 'package:flutter_starter_app/core/providers/storage_provider.dart'
    as _i5;
import 'package:flutter_starter_app/features/main/data/models/device_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceModel_0 extends _i1.SmartFake implements _i2.DeviceModel {
  _FakeDeviceModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeviceProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceProvider extends _i1.Mock implements _i3.DeviceProvider {
  MockDeviceProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, String?>> get getPackageInfos => (super.noSuchMethod(
        Invocation.getter(#getPackageInfos),
        returnValue:
            _i4.Future<Map<String, String?>>.value(<String, String?>{}),
      ) as _i4.Future<Map<String, String?>>);

  @override
  _i4.Future<Map<String, String?>> get getDeviceInfos => (super.noSuchMethod(
        Invocation.getter(#getDeviceInfos),
        returnValue:
            _i4.Future<Map<String, String?>>.value(<String, String?>{}),
      ) as _i4.Future<Map<String, String?>>);

  @override
  _i4.Future<_i2.DeviceModel> get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: _i4.Future<_i2.DeviceModel>.value(_FakeDeviceModel_0(
          this,
          Invocation.getter(#device),
        )),
      ) as _i4.Future<_i2.DeviceModel>);
}

/// A class which mocks [StorageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageProvider extends _i1.Mock implements _i5.StorageProvider {
  MockStorageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> save(
    String? boxKey,
    String? itemKey,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [
            boxKey,
            itemKey,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> get(
    String? boxKey,
    String? itemKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            boxKey,
            itemKey,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> delete(
    String? boxKey,
    String? itemKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            boxKey,
            itemKey,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
